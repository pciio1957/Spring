# 스프링 전체 개관!!!
1. 스프링의 기본처리 프로세스에 대한 이해
2. 스프링의 개발 환경 설정
3. 컨테이너에 대한 이해와 설정
	1) IOC(제어의 역전)
	2) DI, DL
	3) 라이플 사이클과 범위
	4) 환경관련 및 메시지 처리
	5) AOP
4. 스프링 웹 개발
	1) 스프링 MVC(model2) 기초(요청, 컨트롤러, 모델, 세션)
	2) 스프링 MVC 화면단 처리
	3) 스프링 MVC xml/json/파일업로로드/pdf/웹소켓통시
5. 스프링과 데이터 베이스 연동
	1) DB 연결
	2) mybatis 프레임웍 사용하기
6. 기타 부가 기능
	1) 메일 발송
	2) 작업 실행과 스케줄링
7. 실무활용 예제
	0) 로그인 세션 처리
	1) 답변형게시판(첨부파일,페이징처리,무한레벨계층형 답글작성)
	2) js 플러그인 활용하기(ajax처리)/vue연동처리	
		- fullcalendar
		- 기타 차트 등등.
	3) springboot로 답변형 게시판 작성..
		
# 세부 사항(누적 필기 및 추가 처리)
1. 스프링의 기본처리 프로세스에 대한 이해
	요청(url과 요청값) ==> web.xml(front컨트롤단, 컨테이너 설정) 
	==> dispatcher-servlet.xml(XXXX-servlet.xml XXXX:front 컨트롤러 이름, 컨테이너 선언)
		 객체로딩
	==> 위 컨테이너에 포함된 객체 안에 url요청에 의한 메핑된 메서드 호출.
	==> controller: 요청값처리, 모델데이터처리(service==> dao), 화면(view단)호출
	==> 최종 화면단 출력(el,jstl)
2. 스프링의 개발 환경 설정
	1) lib 설정
	dynamic 웹프로젝트
		springweb\src\main\webapp\WEB-INF\lib
		직접 필요한 lib 다운 : https://mvnrepository.com
	maven 
		pom.xml 
		<dependency>
	    	<groupId>org.springframework</groupId>
	    	<artifactId>spring-core</artifactId>
	    	<version>5.3.9</version>
		</dependency>
	gradle
		build.gradle 파일에 아래 내용 선언
		implementation group: 'org.springframework', name: 'spring-core', version: '5.3.9'
	스프링 부트(maven, gradle)
		 sts(Spring Tool Suits) 설치를 통한 설정.
	2) web.xml
		front컨트롤러 선언, 컨테이너 선언,  요청값 한글 encoding filter 선언.
	3) 컨테이너 파일 설정.
		controller, service, dao 등록
		view단 등록
		기타 필요한 lib나 사용자 정의 클래스 선언을 통해 자동 객체 생성..		
	
3. 컨테이너에 대한 이해와 설정
	0) web.xml에서 여러가지 url형태에 따른 컨테이너 파일 설정..
	1) IOC : 제어역전 
	2) DI/DL
	3) 라이프 사이클과 범위 : 컨테이너 안에 선언된 빈객체들의 생성과 소멸 참조...
	4) 환경관련 및 메시지 처리 : 외부 설정파일 및 다국어 처리를 위한 메시지 처리, 중요 공통 정보 설정.
	5) AOP : aspect oriented programming 문제를 바라보는 관점을 기준으로 프로그래밍하는 기법
		
4. 스프링 웹 개발
	1) 스프링 MVC 기초(컨트롤러 (요청,모델, 뷰호출) 세션)
		public String 메서드명(@RequestParam("요청key") String  value, Model d){}
		public String 메서드명(요청값을받는객체 참조변수, Model d){}
		public String regMember(Memember mem, Model d){}
		요청처리 
			url get/post
			요청값(key=value)
		모델(Model)
		
			요청 + model : 매개변수 modelattribute @ModelAttributie
			컨트롤단에 공통된 모델 : modelattribute ex) 사원정보controller - 전체조회, 등록, 상세조회, 수정, 삭제..
		뷰단 호출
			redirect 방식 화면 호출
			forward 방식	화면 호출
			ModelAndView (모델+view) 같은 객체에서 처리.
	2) 스프링 MVC 화면단 처리(뷰)
		jsp 화면 호출, 기타 뷰라이버러리에 의한 화면 호출
		spring의 태그라이블러리 화면 - form화면 처리를 효과적으로 할 수 있다.(controller의 modelattribute 연동)
		was의 기준 유효성 check, error 처리
	3) 스프링 MVC xml/json/파일업로드/파일다운로드/pdf/웹소켓통시
		viewresolver를 컨테이너(dispatcher-servlet)에서 선언을 통해 효과적인 view단을 처리할 수 있다. 
5. 스프링과 데이터 베이스 연동
	1) DB 연결 : connection pool 설정과 DB 연결 처리(컨테이너)
	2) mybatis 프레임웍 사용하기
		- 컨테이너에 프레임워호출
		- 공통 mybatis 설정파일 호출
		- sql을 처리할 mapper.xml 선언과 활용
		- dao단 연동을 위한 처리방식 : interface + xml
6. 기타 부가 기능
	1) 메일 발송 : 자동메일 발송 ex) 회원비밀번호 잊을시 등록된 메일로 발송, 회사인사정보 시스템 사원정보 전달..
	2) 작업 실행과 스케줄링 ex) 스프링에서는 was단위 특정한 시간과 간격으로 특정 프로그래밍을 반복적으로 수행 처리할 수 있다.
7. 실무활용 예제
	0) 로그인 세션 처리
	1) 답변형게시판(첨부파일,페이징처리,무한레벨계층형 답글작성)
	2) js 플러그인 활용하기(ajax처리)/vue연동처리	
		- fullcalendar
		- 기타 차트 등등.
	3) springboot로 답변형 게시판 작성..
	4) 웹소켓을 통한 상호간의 실시간 채팅



#MVC 패턴에 의한 DB연결된 화면 개발
0. 요구사항 내용에 의해 화면에서 전달할 요청값과 DB 처리 및 sql 구문 확인 
1. DB처리 - dao
2. Service단 처리 
3. Controller에서 초기 화면 호출 
	1) 요청값 처리 내용 확인
	2) Service단에 데이터로딩 및 모델데이터 처리 
4. 화면단에서 jstl/el을 통한 모델 데이터 처리 


	